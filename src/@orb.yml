# This code is licensed from CircleCI to the user under the MIT license. See
# https://circleci.com/orbs/registry/licensing for details.
commands:
  process_test_results:
    description: |
      Upload test results.
      This will populate the Test Summary tab in the CircleCI UI. By default it will
      look in `target/surefire-reports` (the default location for maven test results).
      You can override where to find the test results with the path parameter.
    parameters:
      test_results_path:
        default: target/surefire-reports
        description: Specify a custom path for maven test results
        type: string
    steps:
    - store_test_results:
        path: << parameters.test_results_path >>
  with_cache:
    description: |
      Run a set of steps with Maven dependencies cached.

      This command will first restore a cache of maven dependencies, if one was
      saved by a previous build. The provided `steps` parameter will then be executed, and
      if successful, then a fresh cache will be saved, if required.

      The contents of the `~/.m2` directory is cached, which will substantially
      improve build times for projects with many dependencies.

      The cache-key is generated using the commit hash from from any files named
      `pom.xml` that are present in the `working_directory`.
    parameters:
      app_src_directory:
        default: ""
        description: Useful when the source of your maven project is nott in the root
          directory of your git repo. Supply the name of the directory or relative
          path of the directory containing your source code.
        type: string
      maven_command:
        default: mvn
        description: Specify a custom path for invoking maven
        type: string
      settings_file:
        default: pom.xml
        description: Specify a custom settings file to use (optional)
        type: string
      cache_key:
        description: Specify a custom cache key (optional).
        type: string
        default: "default"
      steps:
        type: steps
    steps:
    - run:
        command: |
              # find build files
              buildFiles=$(find . -name 'pom.xml' | sed 's/.*/&/' | tr '\n' ' ')
              # get the latest commit which modified the build files
              lastHash=$(git log -n 1 --pretty=format:%H HEAD -- $buildFiles)
              # do a check that there actually is more than one revision
              revisions=$(git rev-list --count HEAD)
              if [ "$revisions" -gt "0" ]; then
                # check which previous revision was the last to modify the build files
                lastPreviousHash=$(git log -n 1 --pretty=format:%H HEAD~1 -- $buildFiles)
                echo "Last commit to modify build files is hash (excluding last commit) is $lastPreviousHash"
                if [ "$lastPreviousHash" = "$lastHash" ]; then
                  echo "Build files did not update last commit"
                else
                  echo "Build files did update last commit"
                fi
              else
                lastPreviousHash=$lastHash
                echo "Build files did update last commit"
              fi
              echo "$lastPreviousHash" > /tmp/git_last_previous_hash
              echo "$lastHash" > /tmp/git_last_hash
        name: Generate Cache Checksum
        working_directory: $CIRCLE_WORKING_DIRECTORY/<< parameters.app_src_directory
          >>
    - restore_cache:
        key: maven-<< parameters.cache_key >>-{{ checksum "/tmp/git_last_previous_hash" }}
    - when:
        condition: << parameters.settings_file >>
        steps:
        - run:
            command: << parameters.maven_command >> dependency:go-offline --settings
              '<< parameters.settings_file >>'
            name: Install Dependencies
            working_directory: << parameters.app_src_directory >>
    - unless:
        condition: << parameters.settings_file >>
        steps:
        - run:
            command: << parameters.maven_command >> dependency:go-offline
            name: Install Dependencies
            working_directory: << parameters.app_src_directory >>
    - steps: << parameters.steps >>
    - save_cache:
        key: maven-<< parameters.cache_key >>-{{ checksum "/tmp/git_last_hash" }}
        paths:
        - ~/.m2
description: |
  Simplify common tasks for building and testing Java projects using Maven on CircleCI
display:
  home_url: https://maven.apache.org/
  source_url: https://github.com/CircleCI-Public/maven-orb
examples:
  custom_command:
    description: |
      Use parameters to run custom Maven commands. In the example below we are running maven verify with debug mode enabled.
    usage:
      orbs:
        maven: circleci/maven@x.y
      version: 2.1
      workflows:
        maven_test:
          jobs:
          - maven/test:
              command: -X verify
  custom_test_results_path:
    description: |
      If your tests results are not in the default (target/surefire-reports) directory then you could add a custom directory.
    usage:
      orbs:
        maven: circleci/maven@x.y
      version: 2.1
      workflows:
        maven_test:
          jobs:
          - maven/test:
              test_results_path: /path/to/test/results
  maven_test:
    description: |
      If you have a standard maven project, you can use this orb to run through a common maven workflow.
      Without any additional configuration you can build, test, and automatically have your test results uploaded to CircleCI.
    usage:
      orbs:
        maven: circleci/maven@x.y
      version: 2.1
      workflows:
        maven_test:
          jobs:
          - maven/test
executors:
  default:
    description: |
      The latest minor and patch update of the version 13 JDK image provided by CircleCI.
    docker:
    - image: cimg/openjdk:<<parameters.tag>>
    parameters:
      tag:
        default: "13.0"
        description: |
          Can be changed to any of the available tags listed on the DockerHub for this image.
          https://hub.docker.com/r/cimg/openjdk/tags
        type: string
jobs:
  parallel_test:
    description: |
      Checkout, build, test, and upload test results for a Maven project spreading tests across multiple nodes
    executor: <<parameters.executor>>
    parallelism: <<parameters.parallelism>>
    parameters:
      app_src_directory:
        default: ""
        description: Useful when the source of your maven project is nott in the root
          directory of your git repo. Supply the name of the directory or relative
          path of the directory containing your source code.
        type: string
      command:
        default: verify
        description: The maven command to run.
        type: string
      executor:
        default: default
        description: The name of custom executor to use
        type: executor
      maven_command:
        default: mvn
        description: Specify a custom path for invoking maven
        type: string
      parallel_it_pattern:
        default: '**/*IT*.java'
        description: |
          This is the standard Failsafe pattern, but you can override
          if you use alternate <includes> patterns in your pom.xml.
        type: string
      parallel_test_pattern:
        default: '**/*Test*.java'
        description: |
          This is the standard Surefire pattern, but you can override
          if you use alternate <includes> patterns in your pom.xml
        type: string
      parallelism:
        default: 2
        description: How many nodes should testing be split across?
        type: integer
      settings_file:
        default: pom.xml
        description: Specify a custom settings file to use (optional)
        type: string
      test_directory:
        default: src/test/java
        description: If following standard maven conventions this does not need to
          be changed.
        type: string
      test_results_path:
        default: target/surefire-reports
        description: The path to the test results.
        type: string
      cache_key:
        description: Specify a custom cache key (optional).
        type: string
        default: "default"
    steps:
    - checkout
    - run:
        command: |
          echo -e "\033[31m\033[4mOrb Notes on Test Splitting\033[0m
          \033[34mCaveat 1:\033[0m  CircleCI Test Splitting uses filename by default, but JUnit reports use class names.
          Therefore this orb uses naive translation of linux file paths to dot separated package names and strips the .java suffix.
          \033[34mCaveat 2:\033[0m  Surefire and Failsafe both allow <includes> in pom configuration (which can come from parent projects).
          These values are appended to any -DincludeFiles argument (meaning it would still run all tests on every node).
          Therefore this orb will generate an exclusion list; a list of tests being run on the other nodes, and pass that to surefire/failsafe as an exclusion.
          \033[34mDebugging:\033[0m This orb will place all files used to decide tests in .circleci/tests and export it as an artifact for inspection/debugging.
          "
          mkdir -p .circleci/tests/
          # generate excluded surefire tests using provided pattern
          circleci tests glob <<parameters.test_directory>>/<<parameters.parallel_test_pattern>> | \
            sed -e 's#^<<parameters.test_directory>>/\(.*\)\.java#\1#' | \
            tr "/" "." > .circleci/tests/surefire_classnames
          cat .circleci/tests/surefire_classnames | \
            circleci tests split --split-by=timings --timings-type=classname > /tmp/this_node_tests
          cat .circleci/tests/surefire_classnames | \
            grep -xvf /tmp/this_node_tests > .circleci/tests/surefire_classnames_ignore_list
          # generate excluded failsafe tests using provided pattern
          circleci tests glob <<parameters.test_directory>>/<<parameters.parallel_it_pattern>> | \
            sed -e 's#^<<parameters.test_directory>>/\(.*\)\.java#\1#' | \
            tr "/" "." > .circleci/tests/failsafe_classnames
          cat .circleci/tests/failsafe_classnames | \
            circleci tests split --split-by=timings --timings-type=classname > /tmp/this_node_it_tests
          cat .circleci/tests/failsafe_classnames |  \
            grep -xvf /tmp/this_node_it_tests > .circleci/tests/failsafe_classnames_ignore_list
        name: Enable Test Splitting
    - store_artifacts:
        path: .circleci/tests/
    - with_cache:
        app_src_directory: << parameters.app_src_directory >>
        settings_file: << parameters.settings_file >>
        cache_key: << parameters.cache_key >>
        steps:
        - when:
            condition: << parameters.settings_file >>
            steps:
            - run:
                command: << parameters.maven_command >> << parameters.command >> -Dsurefire.excludesFile=.circleci/tests/surefire_classnames_ignore_list
                  -Dfailsafe.excludesFile=.circleci/tests/failsafe_classnames_ignore_list
                  --settings '<< parameters.settings_file >>'
                name: Run Tests
        - unless:
            condition: << parameters.settings_file >>
            steps:
            - run:
                app_src_directory: << parameters.app_src_directory >>
                command: << parameters.maven_command >> << parameters.command >> -Dsurefire.excludesFile=.circleci/tests/surefire_classnames_ignore_list
                  -Dfailsafe.excludesFile=.circleci/tests/failsafe_classnames_ignore_list
                name: Run Tests
    - process_test_results:
        test_results_path: << parameters.test_results_path >>
  test:
    description: |
      Checkout, build, test, and upload test results for a Maven project.
    executor: <<parameters.executor>>
    parameters:
      app_src_directory:
        default: ""
        description: Useful when the source of your maven project is nott in the root
          directory of your git repo. Supply the name of the directory or relative
          path of the directory containing your source code.
        type: string
      command:
        default: verify
        description: The maven command to run.
        type: string
      executor:
        default: default
        description: The name of custom executor to use
        type: executor
      maven_command:
        default: mvn
        description: Specify a custom path for invoking maven
        type: string
      settings_file:
        default: pom.xml
        description: Specify a custom settings file to use (optional)
        type: string
      test_results_path:
        default: target/surefire-reports
        description: The path to the test results.
        type: string
      cache_key:
        description: Specify a custom cache key (optional).
        type: string
        default: "default"
    steps:
    - checkout
    - with_cache:
        app_src_directory: << parameters.app_src_directory >>
        settings_file: << parameters.settings_file >>
        cache_key: << parameters.cache_key >>
        steps:
        - when:
            condition: << parameters.settings_file >>
            steps:
            - run:
                command: << parameters.maven_command >> << parameters.command >> --settings
                  '<< parameters.settings_file >>';
                name: Run Tests
                working_directory: << parameters.app_src_directory >>
        - unless:
            condition: << parameters.settings_file >>
            steps:
            - run:
                command: << parameters.maven_command >> << parameters.command >>;
                name: Run Tests
                working_directory: << parameters.app_src_directory >>
    - process_test_results:
        test_results_path: << parameters.test_results_path >>
version: 2.1
